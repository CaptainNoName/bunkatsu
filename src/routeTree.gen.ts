/* eslint-disable */

// @ts-nocheck

// noinspection JSUnusedGlobalSymbols

// This file was automatically generated by TanStack Router.
// You should NOT make any changes in this file as it will be overwritten.
// Additionally, you should also exclude this file from your linter and/or formatter to prevent it from being checked or modified.

// Import Routes

import { Route as rootRoute } from './routes/__root'
import { Route as DashboardRouteImport } from './routes/dashboard/route'
import { Route as AuthRouteImport } from './routes/auth/route'
import { Route as IndexImport } from './routes/index'
import { Route as DashboardIndexImport } from './routes/dashboard/index'
import { Route as AuthIndexImport } from './routes/auth/index'
import { Route as AuthSignInImport } from './routes/auth/sign-in'
import { Route as DashboardExpensesIndexImport } from './routes/dashboard/expenses/index'
import { Route as DashboardExpensesCreateImport } from './routes/dashboard/expenses/create'

// Create/Update Routes

const DashboardRouteRoute = DashboardRouteImport.update({
  id: '/dashboard',
  path: '/dashboard',
  getParentRoute: () => rootRoute,
} as any)

const AuthRouteRoute = AuthRouteImport.update({
  id: '/auth',
  path: '/auth',
  getParentRoute: () => rootRoute,
} as any)

const IndexRoute = IndexImport.update({
  id: '/',
  path: '/',
  getParentRoute: () => rootRoute,
} as any)

const DashboardIndexRoute = DashboardIndexImport.update({
  id: '/',
  path: '/',
  getParentRoute: () => DashboardRouteRoute,
} as any)

const AuthIndexRoute = AuthIndexImport.update({
  id: '/',
  path: '/',
  getParentRoute: () => AuthRouteRoute,
} as any)

const AuthSignInRoute = AuthSignInImport.update({
  id: '/sign-in',
  path: '/sign-in',
  getParentRoute: () => AuthRouteRoute,
} as any)

const DashboardExpensesIndexRoute = DashboardExpensesIndexImport.update({
  id: '/expenses/',
  path: '/expenses/',
  getParentRoute: () => DashboardRouteRoute,
} as any)

const DashboardExpensesCreateRoute = DashboardExpensesCreateImport.update({
  id: '/expenses/create',
  path: '/expenses/create',
  getParentRoute: () => DashboardRouteRoute,
} as any)

// Populate the FileRoutesByPath interface

declare module '@tanstack/react-router' {
  interface FileRoutesByPath {
    '/': {
      id: '/'
      path: '/'
      fullPath: '/'
      preLoaderRoute: typeof IndexImport
      parentRoute: typeof rootRoute
    }
    '/auth': {
      id: '/auth'
      path: '/auth'
      fullPath: '/auth'
      preLoaderRoute: typeof AuthRouteImport
      parentRoute: typeof rootRoute
    }
    '/dashboard': {
      id: '/dashboard'
      path: '/dashboard'
      fullPath: '/dashboard'
      preLoaderRoute: typeof DashboardRouteImport
      parentRoute: typeof rootRoute
    }
    '/auth/sign-in': {
      id: '/auth/sign-in'
      path: '/sign-in'
      fullPath: '/auth/sign-in'
      preLoaderRoute: typeof AuthSignInImport
      parentRoute: typeof AuthRouteImport
    }
    '/auth/': {
      id: '/auth/'
      path: '/'
      fullPath: '/auth/'
      preLoaderRoute: typeof AuthIndexImport
      parentRoute: typeof AuthRouteImport
    }
    '/dashboard/': {
      id: '/dashboard/'
      path: '/'
      fullPath: '/dashboard/'
      preLoaderRoute: typeof DashboardIndexImport
      parentRoute: typeof DashboardRouteImport
    }
    '/dashboard/expenses/create': {
      id: '/dashboard/expenses/create'
      path: '/expenses/create'
      fullPath: '/dashboard/expenses/create'
      preLoaderRoute: typeof DashboardExpensesCreateImport
      parentRoute: typeof DashboardRouteImport
    }
    '/dashboard/expenses/': {
      id: '/dashboard/expenses/'
      path: '/expenses'
      fullPath: '/dashboard/expenses'
      preLoaderRoute: typeof DashboardExpensesIndexImport
      parentRoute: typeof DashboardRouteImport
    }
  }
}

// Create and export the route tree

interface AuthRouteRouteChildren {
  AuthSignInRoute: typeof AuthSignInRoute
  AuthIndexRoute: typeof AuthIndexRoute
}

const AuthRouteRouteChildren: AuthRouteRouteChildren = {
  AuthSignInRoute: AuthSignInRoute,
  AuthIndexRoute: AuthIndexRoute,
}

const AuthRouteRouteWithChildren = AuthRouteRoute._addFileChildren(
  AuthRouteRouteChildren,
)

interface DashboardRouteRouteChildren {
  DashboardIndexRoute: typeof DashboardIndexRoute
  DashboardExpensesCreateRoute: typeof DashboardExpensesCreateRoute
  DashboardExpensesIndexRoute: typeof DashboardExpensesIndexRoute
}

const DashboardRouteRouteChildren: DashboardRouteRouteChildren = {
  DashboardIndexRoute: DashboardIndexRoute,
  DashboardExpensesCreateRoute: DashboardExpensesCreateRoute,
  DashboardExpensesIndexRoute: DashboardExpensesIndexRoute,
}

const DashboardRouteRouteWithChildren = DashboardRouteRoute._addFileChildren(
  DashboardRouteRouteChildren,
)

export interface FileRoutesByFullPath {
  '/': typeof IndexRoute
  '/auth': typeof AuthRouteRouteWithChildren
  '/dashboard': typeof DashboardRouteRouteWithChildren
  '/auth/sign-in': typeof AuthSignInRoute
  '/auth/': typeof AuthIndexRoute
  '/dashboard/': typeof DashboardIndexRoute
  '/dashboard/expenses/create': typeof DashboardExpensesCreateRoute
  '/dashboard/expenses': typeof DashboardExpensesIndexRoute
}

export interface FileRoutesByTo {
  '/': typeof IndexRoute
  '/auth/sign-in': typeof AuthSignInRoute
  '/auth': typeof AuthIndexRoute
  '/dashboard': typeof DashboardIndexRoute
  '/dashboard/expenses/create': typeof DashboardExpensesCreateRoute
  '/dashboard/expenses': typeof DashboardExpensesIndexRoute
}

export interface FileRoutesById {
  __root__: typeof rootRoute
  '/': typeof IndexRoute
  '/auth': typeof AuthRouteRouteWithChildren
  '/dashboard': typeof DashboardRouteRouteWithChildren
  '/auth/sign-in': typeof AuthSignInRoute
  '/auth/': typeof AuthIndexRoute
  '/dashboard/': typeof DashboardIndexRoute
  '/dashboard/expenses/create': typeof DashboardExpensesCreateRoute
  '/dashboard/expenses/': typeof DashboardExpensesIndexRoute
}

export interface FileRouteTypes {
  fileRoutesByFullPath: FileRoutesByFullPath
  fullPaths:
    | '/'
    | '/auth'
    | '/dashboard'
    | '/auth/sign-in'
    | '/auth/'
    | '/dashboard/'
    | '/dashboard/expenses/create'
    | '/dashboard/expenses'
  fileRoutesByTo: FileRoutesByTo
  to:
    | '/'
    | '/auth/sign-in'
    | '/auth'
    | '/dashboard'
    | '/dashboard/expenses/create'
    | '/dashboard/expenses'
  id:
    | '__root__'
    | '/'
    | '/auth'
    | '/dashboard'
    | '/auth/sign-in'
    | '/auth/'
    | '/dashboard/'
    | '/dashboard/expenses/create'
    | '/dashboard/expenses/'
  fileRoutesById: FileRoutesById
}

export interface RootRouteChildren {
  IndexRoute: typeof IndexRoute
  AuthRouteRoute: typeof AuthRouteRouteWithChildren
  DashboardRouteRoute: typeof DashboardRouteRouteWithChildren
}

const rootRouteChildren: RootRouteChildren = {
  IndexRoute: IndexRoute,
  AuthRouteRoute: AuthRouteRouteWithChildren,
  DashboardRouteRoute: DashboardRouteRouteWithChildren,
}

export const routeTree = rootRoute
  ._addFileChildren(rootRouteChildren)
  ._addFileTypes<FileRouteTypes>()

/* ROUTE_MANIFEST_START
{
  "routes": {
    "__root__": {
      "filePath": "__root.tsx",
      "children": [
        "/",
        "/auth",
        "/dashboard"
      ]
    },
    "/": {
      "filePath": "index.tsx"
    },
    "/auth": {
      "filePath": "auth/route.tsx",
      "children": [
        "/auth/sign-in",
        "/auth/"
      ]
    },
    "/dashboard": {
      "filePath": "dashboard/route.tsx",
      "children": [
        "/dashboard/",
        "/dashboard/expenses/create",
        "/dashboard/expenses/"
      ]
    },
    "/auth/sign-in": {
      "filePath": "auth/sign-in.tsx",
      "parent": "/auth"
    },
    "/auth/": {
      "filePath": "auth/index.tsx",
      "parent": "/auth"
    },
    "/dashboard/": {
      "filePath": "dashboard/index.tsx",
      "parent": "/dashboard"
    },
    "/dashboard/expenses/create": {
      "filePath": "dashboard/expenses/create.tsx",
      "parent": "/dashboard"
    },
    "/dashboard/expenses/": {
      "filePath": "dashboard/expenses/index.tsx",
      "parent": "/dashboard"
    }
  }
}
ROUTE_MANIFEST_END */
